knitr::opts_chunk$set(echo = TRUE)
rgl::setupKnitr(autoprint = TRUE)
options(rgl.useNULL = TRUE)
library(lidR)
library(lidRplugins)
library(raster)
library(rgdal)
library(rgl)
las <- readLAS(file.choose())
knitr::opts_chunk$set(echo = TRUE)
rgl::setupKnitr(autoprint = TRUE)
options(rgl.useNULL = TRUE)
library(lidR)
library(lidRplugins)
library(raster)
library(rgdal)
library(rgl)
las <- readLAS(file.choose())
plot(las) ## initiates a 3D plot, must be run in R
rglwidget()
las_check(las)
epsg(las) ##get the coordinate system of the file.  Here we get 32610, which has a vertical unit of meters, so we know the Z values will be in meters
plot(pixel_metrics(las, ~min(Z), res = 10))
min(las@data$Z)
las <- filter_duplicates(las)
las <- classify_ground(las, csf(rigidness = 2L))
plot(pixel_metrics(las[las@data$Classification==2L], ~mean(Z), res = 2))
plot(las[las@data$Classification==2L])
grnd_points <- filter_poi(las, Classification == 2L, Z < 40) ##filter point cloud to include only non-anomalous ground points
idw_terrain <- rasterize_terrain(grnd_points, algorithm = knnidw())
krig_terrain <- rasterize_terrain(grnd_points, algorithm = kriging())
tin_terrain <- rasterize_terrain(grnd_points, algorithm = tin())
raster::plot(idw_terrain,
main = "Inverse Distance Weighting DTM")
raster::plot(krig_terrain,
main = "kriging DTM")
raster::plot(tin_terrain,
main = "Delaunay Trianglation DTM")
## normalize the point cloud heights
las_norm <- normalize_height(las, algorithm = tin_terrain)
las_trees_ivf <- las_Trees %>%
classify_noise(ivf(res = .5,  n = 40)) %>%
filter_poi(las_Trees@data$Classification!=18)
knitr::opts_chunk$set(echo = TRUE)
rgl::setupKnitr(autoprint = TRUE)
options(rgl.useNULL = TRUE)
library(lidR)
library(lidRplugins)
library(raster)
library(rgdal)
library(rgl)
las <- readLAS(file.choose())
plot(las) ## initiates a 3D plot, must be run in R
rglwidget()
las_check(las)
epsg(las) ##get the coordinate system of the file.  Here we get 32610, which has a vertical unit of meters, so we know the Z values will be in meters
plot(pixel_metrics(las, ~min(Z), res = 10))
min(las@data$Z)
las <- filter_duplicates(las)
las <- classify_ground(las, csf(rigidness = 2L))
plot(pixel_metrics(las[las@data$Classification==2L], ~mean(Z), res = 2))
plot(las[las@data$Classification==2L])
grnd_points <- filter_poi(las, Classification == 2L, Z < 40) ##filter point cloud to include only non-anomalous ground points
idw_terrain <- rasterize_terrain(grnd_points, algorithm = knnidw())
krig_terrain <- rasterize_terrain(grnd_points, algorithm = kriging())
tin_terrain <- rasterize_terrain(grnd_points, algorithm = tin())
raster::plot(idw_terrain,
main = "Inverse Distance Weighting DTM")
raster::plot(krig_terrain,
main = "kriging DTM")
raster::plot(tin_terrain,
main = "Delaunay Trianglation DTM")
## normalize the point cloud heights
las_norm <- normalize_height(las, algorithm = tin_terrain)
plot(pixel_metrics(las_norm, ~max(Z), res = 2))
lidR::plot(pixel_metrics(las_norm, ~mean(Z) , res = 1 ))
las_norm_clip <- clip_rectangle(las_norm, 399110,4505920, 399280, 4506080)
plot(pixel_metrics(las_norm_clip, ~mean(Z), res = 1))
las_Trees <- filter_poi(las_norm_clip, Classification != 2L, Z > 10)
plot(las_Trees)
rglwidget()
las_trees_ivf <- las_Trees %>%
classify_noise(ivf(res = .5,  n = 40)) %>%
filter_poi(las_Trees@data$Classification!=18)
smooth_ivf <- smooth_height(las_trees_ivf, 1, 'gaussian', 'circle', sigma = 2)
plot(smooth_ivf)
rglwidget()
knitr::opts_chunk$set(echo = TRUE)
library(lidR)
library(lidRplugins)
writeLAS(smooth_ivf, "smoothed_PC")
writeLAS(smooth_ivf, "smoothed_PC.laz")
smoothed_las <- readLAS("smoothed_PC.laz")
las_check(smoothed_las)
library(lidR)
library(lidRplugins)
smoothed_las <- readLAS("smoothed_PC.laz")
library(lidR)
library(lidRplugins)
smoothed_las <- readLAS("smoothed_PC.laz")
plot(smoothed_las)
plot(smoothed_las)
knitr::opts_chunk$set(echo = TRUE)
rgl::setupKnitr(autoprint = TRUE)
options(rgl.useNULL = TRUE)
knitr::opts_chunk$set(echo = TRUE)
rgl::setupKnitr(autoprint = TRUE)
options(rgl.useNULL = TRUE)
library(lidR)
library(lidRplugins)
smoothed_las <- readLAS("smoothed_PC.laz")
plot(smoothed_las)
smoothed_las <- readLAS("smoothed_PC.laz")
plot(smoothed_las)
rglwidget()
tree_auto <- locate_trees(smoothed_las, lmfauto())
View(tree_auto)
plot(tree_auto)
devtools::install_github("Jean-Romain/lidRviewer")
library(lidRviewer)
source("https://raw.githubusercontent.com/Jean-Romain/lidRviewer/master/sdl.R")
remotes::install_github("Jean-Romain/lidRviewer")
